plugins {
    id("java")
    id("io.freefair.lombok") version "8.13.1"
    id("com.diffplug.spotless") version "6.25.0"
    id("com.avast.gradle.docker-compose") version "0.17.12"
    id("com.github.johnrengelman.shadow") version "7.1.2"
}

apply plugin: "com.diffplug.spotless"

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
    maven {
        url "https://maven.pkg.github.com/triplea-game/triplea"
        credentials {
            username = System.getenv("GITHUB_ACTOR") ?: project.property("triplea.github.username")
            password = System.getenv("GH_TOKEN") ?: project.property("triplea.github.access.token")
        }
    }
}

jar {
    manifest {
        attributes "Main-Class": "org.triplea.spitfire.server.SpitfireServerApplication"
    }
}

shadowJar {
    archiveClassifier.set ""
    // mergeServiceFiles is needed by dropwizard
    // Without this configuration parsing breaks and is unable to find connector type "http" for
    // the following YAML snippet:  server: {applicationConnectors: [{type: http, port: 8080}]
    mergeServiceFiles()
}

/* 'testInteg' runs tests that require a database or a server to be running */
sourceSets {
    testInteg {
        java.srcDir "$projectDir/src/testInteg/java"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    testIntegImplementation.extendsFrom testImplementation
    testIntegRuntime.extendsFrom testRuntime
}

task testInteg(type: Test) {
    testClassesDirs = sourceSets.testInteg.output.classesDirs
    classpath = sourceSets.testInteg.runtimeClasspath
}

check.dependsOn testInteg

/* docker compose used to set up integ tests, starts a server and database */
dockerCompose {
    // See: https://github.com/avast/gradle-docker-compose-plugin
    captureContainersOutput = false // if true, prints output of all containers to Gradle output
    //    captureContainersOutputToFile = project.file('/path/to/logFile') // sends output of all containers to a log file
    //    captureContainersOutputToFiles = project.file('/path/to/directory') // sends output of all services to a dedicated log file in the directory specified, e.g. 'web.log' for service named 'log'
    //    composeLogToFile = project.file('build/my-logs.txt') // redirect output of composeUp and composeDown tasks to this file; default is null (ouput is not redirected)
    projectName = 'lobby' // allow to set custom docker-compose project name (defaults to a stable name derived from absolute path of the project and nested settings name), set to null to Docker Compose default (directory name)

    // Do not stop containers, we can hot redeploy
    removeContainers = false
    database {
        startedServices = ['database']
        projectName = 'lobby-gradle'
        isRequiredBy(project.tasks.testInteg)
        stopContainers = false // doesn't call `docker-compose down` if set to false - see below the paragraph about reconnecting; default is true
    }

    application {
        startedServices = ['flyway', 'lobby']
        projectName = 'lobby-gradle'
        isRequiredBy(project.tasks.testInteg)
        stopContainers = false // doesn't call `docker-compose down` if set to false - see below the paragraph about reconnecting; default is true
    }
}

task restartLobbyDocker(type: Exec) {
    inputs.file("./build/libs/lobby-server.jar")
    commandLine 'docker', 'compose', '-p', 'lobby-gradle', 'restart', 'lobby'
    outputs.upToDateWhen { true }
    ignoreExitValue true
}

task stopDocker(type: Exec) {
    commandLine 'docker', 'compose', '-p', 'lobby-gradle', 'down'
    ignoreExitValue true
}

clean.dependsOn stopDocker
shadowJar.finalizedBy restartLobbyDocker
applicationComposeBuild.dependsOn shadowJar


tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.incremental = true
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    testLogging {
        exceptionFormat = "full"
        events = ["standardOut", "standardError", "skipped", "failed"]
    }

    testLogging {
        exceptionFormat = "full"
        events = ["standardOut", "standardError", "skipped", "failed"]
    }
}


spotless {
    java {
        googleJavaFormat()
        removeUnusedImports()
    }
}

ext {
    awaitilityVersion = "4.2.1"
    bcryptVersion = "0.10.2"
    databaseRiderVersion = "1.43.0"
    dropwizardVersion = "4.0.7"
    dropwizardWebsocketsVersion = "1.3.14"
    feignVersion = "13.2.1"
    hamcrestJsonVersion = "0.3"
    jakartaMailVersion = "2.0.1"
    javaWebSocketVersion = "1.5.7"
    javaxActivationVersion = "1.1.1"
    jaxbApiVersion = "2.3.1"
    jaxbCoreVersion = "4.0.5"
    jaxbImplVersion = "4.0.5"
    jdbiVersion = "3.45.1"
    junitJupiterVersion = "5.10.2"
    junitPlatformLauncherVersion = "1.12.2"
    mockitoVersion = "5.11.0"
    openFeignVersion = "13.6"
    postgresqlVersion = "42.7.3"
    tripleaClient = "2.7.14846"
    wireMockJunit5Version = "1.3.1"
}

dependencies {
    implementation "at.favre.lib:bcrypt:$bcryptVersion"
    implementation "be.tomcools:dropwizard-websocket-jsr356-bundle:4.0.0"
    implementation "com.sun.mail:jakarta.mail:$jakartaMailVersion"
    implementation "com.sun.xml.bind:jaxb-core:$jaxbCoreVersion"
    implementation "com.sun.xml.bind:jaxb-impl:$jaxbImplVersion"
    implementation "io.dropwizard:dropwizard-auth:$dropwizardVersion"
    implementation "io.dropwizard:dropwizard-core:$dropwizardVersion"
    implementation "io.dropwizard:dropwizard-jdbi3:$dropwizardVersion"
    implementation "io.github.openfeign:feign-core:$openFeignVersion"
    implementation "io.github.openfeign:feign-gson:$openFeignVersion"
    implementation "javax.activation:activation:$javaxActivationVersion"
    implementation "javax.servlet:servlet-api:2.5"
    implementation "javax.xml.bind:jaxb-api:$jaxbApiVersion"
    implementation "org.java-websocket:Java-WebSocket:$javaWebSocketVersion"
    implementation "org.jdbi:jdbi3-core:$jdbiVersion"
    implementation "org.jdbi:jdbi3-sqlobject:$jdbiVersion"
    implementation "triplea:domain-data:$tripleaClient"
    implementation "triplea:feign-common:$tripleaClient"
    implementation "triplea:java-extras:$tripleaClient"
    implementation "triplea:lobby-client:$tripleaClient"
    implementation "triplea:websocket-client:$tripleaClient"
    runtimeOnly "org.postgresql:postgresql:$postgresqlVersion"

    testImplementation "com.github.database-rider:rider-junit5:$databaseRiderVersion"
    testImplementation "com.github.npathai:hamcrest-optional:2.0.0"
    testImplementation "com.sun.mail:jakarta.mail:$jakartaMailVersion"
    testImplementation "io.dropwizard:dropwizard-testing:$dropwizardVersion"
    testImplementation "org.awaitility:awaitility:$awaitilityVersion"
    testImplementation "org.jdbi:jdbi3-core:$jdbiVersion"
    testImplementation "org.jdbi:jdbi3-sqlobject:$jdbiVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
    testImplementation "org.wiremock:wiremock:3.7.0"
    testImplementation "ru.lanwen.wiremock:wiremock-junit5:1.3.1"
    testImplementation "uk.co.datumedge:hamcrest-json:$hamcrestJsonVersion"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher:$junitPlatformLauncherVersion"
}
